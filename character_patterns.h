/*
 * Character Patterns Library
 * 10x10 pixel patterns for letters, numbers, and symbols
 * 
 * Save this file as: character_patterns.h
 * Place in same folder as your main .ino file
 */

#ifndef CHARACTER_PATTERNS_H
#define CHARACTER_PATTERNS_H

// Letter patterns (A-Z)
const bool PATTERN_A[100] = {
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,0,0,1,1,1,0,
  0,1,1,0,0,0,0,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_B[100] = {
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,0,0,0,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,0,0
};

const bool PATTERN_C[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,0,0,0,1,1,1,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_D[100] = {
  1,1,1,1,1,1,1,0,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,0,0,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,1,1,1,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,0,0,0
};

const bool PATTERN_E[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1
};

const bool PATTERN_F[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0
};

const bool PATTERN_G[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,0,0,0,1,1,1,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,1,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_H[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_I[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1
};

const bool PATTERN_J[100] = {
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  1,1,1,0,0,0,1,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_K[100] = {
  1,1,1,0,0,0,1,1,1,0,
  1,1,1,0,0,1,1,1,0,0,
  1,1,1,0,1,1,1,0,0,0,
  1,1,1,1,1,1,0,0,0,0,
  1,1,1,1,1,0,0,0,0,0,
  1,1,1,1,1,0,0,0,0,0,
  1,1,1,1,1,1,0,0,0,0,
  1,1,1,0,1,1,1,0,0,0,
  1,1,1,0,0,1,1,1,0,0,
  1,1,1,0,0,0,1,1,1,0
};

const bool PATTERN_L[100] = {
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1
};

const bool PATTERN_M[100] = {
  1,1,0,0,0,0,0,0,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,1,1,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_N[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,0,1,1,1,
  1,1,1,1,1,0,0,1,1,1,
  1,1,1,1,1,1,0,1,1,1,
  1,1,1,0,1,1,1,1,1,1,
  1,1,1,0,0,1,1,1,1,1,
  1,1,1,0,0,0,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_O[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_P[100] = {
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0
};

const bool PATTERN_Q[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,1,1,0,1,1,1,
  1,1,1,1,0,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,1,1
};

const bool PATTERN_R[100] = {
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,0,1,1,1,0,0,0,
  1,1,1,0,0,1,1,1,0,0,
  1,1,1,0,0,0,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_S[100] = {
  0,0,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,1,1,
  1,1,1,1,0,0,0,0,0,0,
  1,1,1,1,0,0,0,0,0,0,
  0,1,1,1,1,1,1,1,0,0,
  0,0,1,1,1,1,1,1,1,0,
  0,0,0,0,0,0,1,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,0,0
};

const bool PATTERN_T[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0
};

const bool PATTERN_U[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_V[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,0,0,1,1,1,0,
  0,1,1,1,0,0,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,0,1,1,0,0,0,0
};

const bool PATTERN_W[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,1,1,0,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,0,0,0,0,0,0,1,1
};

const bool PATTERN_X[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  0,1,1,1,0,0,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,0,0,1,1,1,0,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,0,0,0,0,1,1,1
};

const bool PATTERN_Y[100] = {
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,1,0,0,1,1,1,1,
  0,1,1,1,0,0,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0
};

const bool PATTERN_Z[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,0,0,1,1,1,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,1,1,1,0,0,0,0,
  0,0,1,1,1,0,0,0,0,0,
  0,1,1,1,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1
};

// Number patterns (0-9)
const bool PATTERN_0[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,1,1,1,1,
  1,1,1,0,0,1,1,1,1,1,
  1,1,1,0,1,1,0,1,1,1,
  1,1,1,1,1,0,0,1,1,1,
  1,1,1,1,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_1[100] = {
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,1,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,1,0
};

const bool PATTERN_2[100] = {
  0,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,0,1,1,1,1,0,0,
  0,0,1,1,1,1,0,0,0,0,
  0,1,1,1,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1
};

const bool PATTERN_3[100] = {
  0,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,1,0,0,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,0,0
};

const bool PATTERN_4[100] = {
  0,0,0,0,0,1,1,1,1,0,
  0,0,0,0,1,1,1,1,1,0,
  0,0,0,1,1,1,1,1,1,0,
  0,0,1,1,1,0,1,1,1,0,
  0,1,1,1,0,0,1,1,1,0,
  1,1,1,0,0,0,1,1,1,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,0,0,0,1,1,1,0
};

const bool PATTERN_5[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,0,0,1,1,1,
  1,1,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,0,0
};

const bool PATTERN_6[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,0,0,0,0,0,0,
  1,1,1,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,0,0,
  1,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_7[100] = {
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  0,0,0,0,0,1,1,1,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,1,1,1,0,0,0,0,
  0,0,0,1,1,1,0,0,0,0,
  0,0,1,1,1,0,0,0,0,0,
  0,0,1,1,1,0,0,0,0,0,
  0,0,1,1,1,0,0,0,0,0
};

const bool PATTERN_8[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_9[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,1,1,1,1,1,1,
  0,0,1,1,1,1,1,1,1,1,
  0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,0,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

// Symbol patterns
const bool PATTERN_HEART[100] = {
  0,1,1,0,0,0,0,1,1,0,
  1,1,1,1,0,0,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0
};

const bool PATTERN_STAR[100] = {
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,1,1,0,0,1,1,0,0,
  0,1,1,0,0,0,0,1,1,0,
  0,1,0,0,0,0,0,0,1,0,
  1,0,0,0,0,0,0,0,0,1
};

const bool PATTERN_CHECK[100] = {
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,1,1,
  0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,0,1,1,1,0,
  1,1,0,0,0,1,1,1,0,0,
  1,1,1,0,1,1,1,0,0,0,
  0,1,1,1,1,1,0,0,0,0,
  0,0,1,1,1,0,0,0,0,0,
  0,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0
};

const bool PATTERN_CROSS[100] = {
  1,1,0,0,0,0,0,0,1,1,
  1,1,1,0,0,0,0,1,1,1,
  0,1,1,1,0,0,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,0,0,1,1,1,0,
  1,1,1,0,0,0,0,1,1,1,
  1,1,0,0,0,0,0,0,1,1
};

const bool PATTERN_ARROW_RIGHT[100] = {
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,1,1,0,0,
  0,0,0,0,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,0,1,1,1,1,1,0,
  0,0,0,0,1,1,1,1,0,0,
  0,0,0,0,1,1,1,0,0,0,
  0,0,0,0,1,1,0,0,0,0
};

const bool PATTERN_ARROW_LEFT[100] = {
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,1,1,1,0,0,0,0,
  0,0,1,1,1,1,0,0,0,0,
  0,1,1,1,1,1,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,0,0,0,0,
  0,0,1,1,1,1,0,0,0,0,
  0,0,0,1,1,1,0,0,0,0,
  0,0,0,0,1,1,0,0,0,0
};

const bool PATTERN_ARROW_UP[100] = {
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,1,1,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0
};

const bool PATTERN_ARROW_DOWN[100] = {
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0
};

const bool PATTERN_DIAMOND[100] = {
  0,0,0,0,1,1,0,0,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0,
  0,0,0,1,1,1,1,0,0,0,
  0,0,0,0,1,1,0,0,0,0
};

const bool PATTERN_CIRCLE[100] = {
  0,0,1,1,1,1,1,1,0,0,
  0,1,1,1,1,1,1,1,1,0,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,
  0,1,1,1,1,1,1,1,1,0,
  0,0,1,1,1,1,1,1,0,0
};

const bool PATTERN_SPACE[100] = {
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0
};

// Function to get character pattern
const bool* getCharacterPattern(char c) {
  // Handle special symbol codes (1-10)
  switch((uint8_t)c) {
    case 1: return PATTERN_HEART;
    case 2: return PATTERN_STAR;
    case 3: return PATTERN_CHECK;
    case 4: return PATTERN_CROSS;
    case 5: return PATTERN_ARROW_RIGHT;
    case 6: return PATTERN_ARROW_LEFT;
    case 7: return PATTERN_ARROW_UP;
    case 8: return PATTERN_ARROW_DOWN;
    case 9: return PATTERN_DIAMOND;
    case 10: return PATTERN_CIRCLE;
  }
  
  // Convert to uppercase for letters
  if (c >= 'a' && c <= 'z') {
    c = c - 32; // Convert to uppercase
  }
  
  // Letters A-Z
  if (c >= 'A' && c <= 'Z') {
    switch(c) {
      case 'A': return PATTERN_A;
      case 'B': return PATTERN_B;
      case 'C': return PATTERN_C;
      case 'D': return PATTERN_D;
      case 'E': return PATTERN_E;
      case 'F': return PATTERN_F;
      case 'G': return PATTERN_G;
      case 'H': return PATTERN_H;
      case 'I': return PATTERN_I;
      case 'J': return PATTERN_J;
      case 'K': return PATTERN_K;
      case 'L': return PATTERN_L;
      case 'M': return PATTERN_M;
      case 'N': return PATTERN_N;
      case 'O': return PATTERN_O;
      case 'P': return PATTERN_P;
      case 'Q': return PATTERN_Q;
      case 'R': return PATTERN_R;
      case 'S': return PATTERN_S;
      case 'T': return PATTERN_T;
      case 'U': return PATTERN_U;
      case 'V': return PATTERN_V;
      case 'W': return PATTERN_W;
      case 'X': return PATTERN_X;
      case 'Y': return PATTERN_Y;
      case 'Z': return PATTERN_Z;
    }
  }
  
  // Numbers 0-9
  if (c >= '0' && c <= '9') {
    switch(c) {
      case '0': return PATTERN_0;
      case '1': return PATTERN_1;
      case '2': return PATTERN_2;
      case '3': return PATTERN_3;
      case '4': return PATTERN_4;
      case '5': return PATTERN_5;
      case '6': return PATTERN_6;
      case '7': return PATTERN_7;
      case '8': return PATTERN_8;
      case '9': return PATTERN_9;
    }
  }
  
  // Special ASCII symbols
  if (c == ' ') return PATTERN_SPACE;
  if (c == '*') return PATTERN_STAR;
  if (c == '>') return PATTERN_ARROW_RIGHT;
  if (c == '<') return PATTERN_ARROW_LEFT;
  if (c == '^') return PATTERN_ARROW_UP;
  if (c == 'v') return PATTERN_ARROW_DOWN;
  
  // Default: return space if character not found
  return PATTERN_SPACE;
}

#endif // CHARACTER_PATTERNS_H